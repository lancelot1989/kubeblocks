apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/name: kubeblocks
  name: parameterdrivenconfigrenders.parameters.kubeblocks.io
spec:
  group: parameters.kubeblocks.io
  names:
    categories:
    - kubeblocks
    kind: ParameterDrivenConfigRender
    listKind: ParameterDrivenConfigRenderList
    plural: parameterdrivenconfigrenders
    shortNames:
    - paramstemplate
    singular: parameterdrivenconfigrender
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: componentdefinition name
      jsonPath: .spec.componentDef
      name: COMPD
      type: string
    - description: status phase
      jsonPath: .status.phase
      name: PHASE
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ParameterDrivenConfigRender is the Schema for the parameterdrivenconfigrenders
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ParameterDrivenConfigRenderSpec defines the desired state
              of ParameterDrivenConfigRender
            properties:
              componentDef:
                description: Specifies the ComponentDefinition custom resource (CR)
                  that defines the Component's characteristics and behavior.
                type: string
              configs:
                description: Specifies the configuration files.
                items:
                  properties:
                    fileFormatConfig:
                      description: |-
                        Specifies the format of the configuration file and any associated parameters that are specific to the chosen format.
                        Supported formats include `ini`, `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties`, and `toml`.


                        Each format may have its own set of parameters that can be configured.
                        For instance, when using the `ini` format, you can specify the section name.


                        Example:
                        ```
                        fileFormatConfig:
                         format: ini
                         iniConfig:
                           sectionName: mysqld
                        ```
                      properties:
                        format:
                          description: |-
                            The config file format. Valid values are `ini`, `xml`, `yaml`, `json`,
                            `hcl`, `dotenv`, `properties` and `toml`. Each format has its own characteristics and use cases.


                            - ini: is a text-based content with a structure and syntax comprising key–value pairs for properties, reference wiki: https://en.wikipedia.org/wiki/INI_file
                            - xml: refers to wiki: https://en.wikipedia.org/wiki/XML
                            - yaml: supports for complex data types and structures.
                            - json: refers to wiki: https://en.wikipedia.org/wiki/JSON
                            - hcl: The HashiCorp Configuration Language (HCL) is a configuration language authored by HashiCorp, reference url: https://www.linode.com/docs/guides/introduction-to-hcl/
                            - dotenv: is a plain text file with simple key–value pairs, reference wiki: https://en.wikipedia.org/wiki/Configuration_file#MS-DOS
                            - properties: a file extension mainly used in Java, reference wiki: https://en.wikipedia.org/wiki/.properties
                            - toml: refers to wiki: https://en.wikipedia.org/wiki/TOML
                            - props-plus: a file extension mainly used in Java, supports CamelCase(e.g: brokerMaxConnectionsPerIp)
                          enum:
                          - xml
                          - ini
                          - yaml
                          - json
                          - hcl
                          - dotenv
                          - toml
                          - properties
                          - redis
                          - props-plus
                          type: string
                        iniConfig:
                          description: Holds options specific to the 'ini' file format.
                          properties:
                            sectionName:
                              description: A string that describes the name of the
                                ini section.
                              type: string
                          type: object
                      required:
                      - format
                      type: object
                    injectEnvTo:
                      description: |-
                        Specifies the containers to inject the ConfigMap parameters as environment variables.


                        This is useful when application images accept parameters through environment variables and
                        generate the final configuration file in the startup script based on these variables.


                        This field allows users to specify a list of container names, and KubeBlocks will inject the environment
                        variables converted from the ConfigMap into these designated containers. This provides a flexible way to
                        pass the configuration items from the ConfigMap to the container without modifying the image.
                      items:
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                    name:
                      description: Specifies the config file name in the config template.
                      type: string
                    reRenderResourceTypes:
                      description: |-
                        Specifies whether the configuration needs to be re-rendered after v-scale or h-scale operations to reflect changes.


                        In some scenarios, the configuration may need to be updated to reflect the changes in resource allocation
                        or cluster topology. Examples:


                        - Redis: adjust maxmemory after v-scale operation.
                        - MySQL: increase max connections after v-scale operation.
                        - Zookeeper: update zoo.cfg with new node addresses after h-scale operation.
                      items:
                        description: RerenderResourceType defines the resource requirements
                          for a component.
                        enum:
                        - vscale
                        - hscale
                        - tls
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                  required:
                  - fileFormatConfig
                  - name
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - name
                x-kubernetes-list-type: map
              parametersDefs:
                description: Specifies the ParametersDefinition custom resource (CR)
                  that defines the Component parameter's schema and behavior.
                items:
                  type: string
                type: array
              serviceVersion:
                description: |-
                  ServiceVersion specifies the version of the Service expected to be provisioned by this Component.
                  The version should follow the syntax and semantics of the "Semantic Versioning" specification (http://semver.org/).
                  If no version is specified, the latest available version will be used.
                type: string
            required:
            - componentDef
            type: object
          status:
            description: ParameterDrivenConfigRenderStatus defines the observed state
              of ParameterDrivenConfigRender
            properties:
              conditions:
                description: |-
                  Represents a list of detailed status of the ParametersDescription object.


                  This field is crucial for administrators and developers to monitor and respond to changes within the ParametersDescription.
                  It provides a history of state transitions and a snapshot of the current state that can be used for
                  automated logic or direct inspection.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: The most recent generation number of the ParamsDesc object
                  that has been observed by the controller.
                format: int64
                type: integer
              phase:
                description: |-
                  Specifies the status of the configuration template.
                  When set to PDAvailablePhase, the ParamsDesc can be referenced by ComponentDefinition.
                enum:
                - Available
                - Unavailable
                - Deleting
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
